#!/usr/bin/env python
PACKAGE = "lane_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("debug_lines", bool_t,   0, "whether to show debug information and images or not", False)

gen.add("use_gpu", bool_t,   0, "whether to use hardware acceleration or not", False)

gen.add("number_of_threads", int_t,   0, "How many cpu threads (workers) should be used", 4, 0, 10)

gen.add("camera_height", double_t,   0, "height of the camera in mm", 325, 50, 500)
gen.add("camera_pitch", double_t,   0, "pitch of the camera in degrees", 23.4, 0, 70)

gen.add("max_num_lanes", int_t,   0, "maximum number of lanes to detect", 6, 1, 15)
gen.add("lane_num_absent_frames", int_t,   0, "number of frames the current lane is allowed to be absent before deleting it", 3, 1, 100)
gen.add("lane_threshold", double_t,   0, "Threshold to consider a combination of two lines a valid lane", 250, 50, 500)

gen.add("draw_roi", bool_t,   0, "whether to draw the region of interest or not", False)
gen.add("draw_boxes", bool_t,   0, "whether to draw the bounding boxes of the lanes or not", False)
gen.add("draw_lines", bool_t,   0, "whether to draw the lines or not", False)
gen.add("draw_splines", bool_t,   0, "whether to draw the splines(lanes) or not", True)
gen.add("draw_tracked_centroids", bool_t,   0, "whether to draw the tracked centroids or not", False)

gen.add("transform_back", bool_t,   0, "whether to transform back the detected lines on IPM to the original image", False)

gen.add("tracking_dt", double_t,   0, "Delta time for tracking", 0.2, 0.03, 1);
gen.add("tracking_acc_noise_magnitude", double_t,   0, "Magnitude of the acceleration noise", 0.1, 0.05, 0.9);
gen.add("tracking_dist_threshold", double_t,   0, "maximum distance threshold for assign a line on the current frame to a previous one", 60.0, 10, 100);
gen.add("tracking_num_absent_frames", int_t,   0, "number of frames the line is allowed to be absent before deleting it", 3, 1, 100);
gen.add("tracking_num_seen_frames", int_t,   0, "number of frames before considering a line good", 3, 1, 100);

gen.add("min_spline_ransac_window_width", int_t,   0, "minimum width for the spline ransac window (in pixels)", 16, 1, 40);

driving_enum = gen.enum([ gen.const("on_the_right",      int_t, 0, "Drive on the right"),
                       gen.const("on_the_left",     int_t, 1, "Drive on the left")],
                     "An enum to set driving orientation")

gen.add("driving_orientation", int_t, 0, "Driving orientation", 0, 0, 1, edit_method=driving_enum)


gen.add("ipmWidth",              int_t,   0, "width of IPM image to use",  320, 160, 640)
gen.add("ipmHeight",        int_t,      0, "height of IPM image to use", 240, 120, 480)
gen.add("ipmTop",       int_t,      0, "Top point in original image of region to make IPM for", 220, 50, 220)
gen.add("ipmLeft", int_t,      0, "Left point in original image of region to make IPM for", 10, 10, 150)
gen.add("ipmRight",    int_t,   0, "Right point in original image of region to make IPM for", 540, 300, 640)
gen.add("ipmBottom",        int_t,      0, "Bottom point in original image of region to make IPM for", 480, 300, 480)
gen.add("ipmInterpolation",  int_t,   0, "The method to use for IPM interpolation (default 0: bilinear. 1: NN)", 0, 0, 1)

gen.add("lineWidth",  double_t,   0, "width of line to detect in mm (in the world)", 18, 10, 30)
gen.add("lineHeight", double_t,   0, "height of line to detect in mm (in the world)", 500, 10, 2000)
gen.add("line_dist_threshold", double_t,   0, "maximum allowed position difference (in pixel) of a line centroid from one frame to the next one", 8, 1, 50)
gen.add("width_between_lines", double_t,   0, "width between to lines in mm (in the world)", 422, 400, 850)
gen.add("width_between_lines_threshold", double_t,   0, "threshold for the lane width", 40, 1, 100)
gen.add("lane_width_weight", double_t,   0, "Cost weight for the lane width", 3, 1, 10)

gen.add("use_custom_kernels", bool_t,   0, "whether to use custom kernels for filtering", False)
gen.add("kernelWidth", int_t,   0, "widht of kernel to use for filtering", 7, 1, 30)
gen.add("kernelHeight", int_t,   0, "height of kernel to use for filtering", 5, 1, 30)
gen.add("lowerQuantile", double_t,   0, "lower quantile to use for thresholding the filtered image", 0.985, 0.0, 0.99)

gen.add("binarize", bool_t,   0, "whether to binarize the thresholded image or use the raw values", False)
gen.add("detectionThreshold", double_t,   0, "threshold for line scores to declare as line", 4, 0, 30)
gen.add("smoothScores", bool_t,   0, "whether to smooth scores of lines detected or not", True)

gen.add("ipmVpPortion", double_t,   0, "Portion of IPM image height to add to y-coordinate of VP", 0.0, 0, 0.8)

gen.add("getEndPoints", bool_t,   0, "Get the endpoints of the line", False)
gen.add("group", bool_t,   0, "group nearby lines or not (default 1: group)", True)
gen.add("groupThreshold", double_t,   0, "Threshold for grouping nearby lines", 15.45, 10, 25)

#RANSAC options
gen.add("ransacLineNumSamples", int_t,   0, "Number of samples to use for RANSAC", 4, 0, 180)
gen.add("ransacLineNumIterations", int_t,   0, "Number of iterations to use for RANSAC", 40, 25, 100)
gen.add("ransacLineNumGoodFit", int_t,   0, "Number of close points to consider a good line fit", 10, 10, 15)
gen.add("ransacLineThreshold", double_t,   0, "Threshold to consider a point close", 0.2, 0, 0.9)
gen.add("ransacLineScoreThreshold", double_t,   0, "Threshold for detected line scores", 0, 0, 20)
gen.add("ransacLineBinarize", bool_t,   0, "Whether to binarize image for RANSAC or not", False)
gen.add("ransacLineWindow", int_t,   0, "Half width to use for ransac window", 15, 0, 15)

gen.add("overlapThreshold", double_t,   0, "Overlap threshold to use for grouping of bounding boxes", 0.3, 0.3, 0.9)

exit(gen.generate(PACKAGE, "lane_detector", "Detector"))
